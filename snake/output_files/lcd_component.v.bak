module lcd_component(
  input CLOCK_50,	// 50 MHz 时钟
//	LCD 模块 16X2
  output LCD_ON,	// LCD 电源开关
  output LCD_BLON,	// LCD 背光开关
  output LCD_RW,	// LCD 读/写选择，0 = 写，1 = 读
  output LCD_EN,	// LCD 使能信号
  output LCD_RS,	// LCD 命令/数据选择，0 = 命令，1 = 数据
  inout [7:0] LCD_DATA,	// LCD 数据总线 8 位
  input [2:0] mess, // 消息状态 (参见 lcd_test)
  input [7:0] SW, // 开关输入（假设 SW[0] 和 SW[1] 用于 isServer）
  output [6:0] HEX0, // 十六进制显示输出（假设连接到某个设备）
  output [6:0] HEX1,
  output [6:0] HEX2,
  output [6:0] HEX3,
  output [6:0] HEX4,
  output [6:0] HEX5,
  output [6:0] HEX6,
  output [6:0] HEX7
);

//	所有的 inout 端口都设置为三态
assign	GPIO_0		=	36'hzzzzzzzzz;
assign	GPIO_1		=	36'hzzzzzzzzz;

// 重置信号延迟，给外设初始化一些时间
wire DLY_RST;
reset_delay r0(	.iCLK(CLOCK_50), .oRESET(DLY_RST) );

// 打开 LCD
assign	LCD_ON		=	1'b1;
assign	LCD_BLON	=	1'b1;

// 将 SW[1:0] 连接到 isServer
wire [1:0] isServer = SW[1:0]; // 将 SW 的最低 2 位赋值给 isServer

lcd_messages u1(
   // 主机端
   .iCLK(CLOCK_50),
   .iRST_N(DLY_RST),
   // LCD 端
   .LCD_DATA(LCD_DATA),
   .LCD_RW(LCD_RW),
   .LCD_EN(LCD_EN),
   .LCD_RS(LCD_RS),
   .mess(mess),
   .isServer(isServer) // 将 isServer 传递给 lcd_messages 模块
);

// 将未使用的 7 段显示数字清空
assign HEX0 = 7'b111_1111;
assign HEX1 = 7'b111_1111;
assign HEX2 = 7'b111_1111;
assign HEX3 = 7'b111_1111;
assign HEX4 = 7'b111_1111;
assign HEX5 = 7'b111_1111;
assign HEX6 = 7'b111_1111;
assign HEX7 = 7'b111_1111;

endmodule
