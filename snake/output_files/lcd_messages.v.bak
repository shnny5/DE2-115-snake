module lcd_messages(
// Host Side
  input iCLK,iRST_N,
// Server Message input,
  input [2:0] mess,
  input [1:0] isServer,
// LCD Side
  output [7:0] 	LCD_DATA,
  output LCD_RW,LCD_EN,LCD_RS
);
//	Internal Wires/Registers
reg	[5:0]	LUT_INDEX;
reg	[8:0]	LUT_DATA;
reg	[5:0]	mLCD_ST;
reg	[17:0]	mDLY;
reg		mLCD_Start;
reg	[7:0]	mLCD_DATA;
reg		mLCD_RS;
wire		mLCD_Done;


parameter	LCD_INTIAL	=	0;
parameter	LCD_LINE1	=	5;
parameter	LCD_CH_LINE	=	LCD_LINE1+16;
parameter	LCD_LINE2	=	LCD_LINE1+16+1;
parameter	LUT_SIZE	=	LCD_LINE1+32+1;

initial begin
	refresh = 1;
end

always@(posedge iCLK or negedge iRST_N)
begin
	if(!iRST_N)
	begin
		LUT_INDEX	<=	0;
		mLCD_ST		<=	0;
		mDLY		<=	0;
		mLCD_Start	<=	0;
		mLCD_DATA	<=	0;
		mLCD_RS		<=	0;
	end
	else
	begin
		if(LUT_INDEX<LUT_SIZE)
		begin
			case(mLCD_ST)
			0:	begin
					mLCD_DATA	<=	LUT_DATA[7:0];
					mLCD_RS		<=	LUT_DATA[8];
					mLCD_Start	<=	1;
					mLCD_ST		<=	1;
				end
			1:	begin
					if(mLCD_Done)
					begin
						mLCD_Start	<=	0;
						mLCD_ST		<=	2;
					end
				end
			2:	begin
					if(mDLY<18'h3FFFE)
					mDLY	<=	mDLY + 1'b1;
					else
					begin
						mDLY	<=	0;
						mLCD_ST	<=	3;
					end
				end
			3:	begin
					LUT_INDEX	<=	LUT_INDEX + 1'b1;
					mLCD_ST	<=	0;
				end
			endcase
		end else if(refresh == 1) begin
			LUT_INDEX <= 0;
      // line 1 message 
      case(isServer)
        0: begin
           line1_mess[0] <= 9'h153; // S
            line1_mess[1] <= 9'h148; // H
            line1_mess[2] <= 9'h14E; // N
            line1_mess[3] <= 9'h14E; // N
            line1_mess[4] <= 9'h159; // Y
            line1_mess[5] <= 9'h135; // 5
            line1_mess[6] <= 9'h120; // 
            line1_mess[7] <= 9'h120; // 
            line1_mess[8] <= 9'h120; // 
            line1_mess[9] <= 9'h120; // 
            line1_mess[10] <= 9'h120; // 
            line1_mess[11] <= 9'h120; // 
            line1_mess[12] <= 9'h120; // 
            line1_mess[13] <= 9'h120; // 
            line1_mess[14] <= 9'h120; // 
            line1_mess[15] <= 9'h120; // 
        end
        1: begin
           line1_mess[0] <= 9'h153; // S
            line1_mess[1] <= 9'h148; // H
            line1_mess[2] <= 9'h14E; // N
            line1_mess[3] <= 9'h14E; // N
            line1_mess[4] <= 9'h159; // Y
            line1_mess[5] <= 9'h135; // 5
            line1_mess[6] <= 9'h153; // 
            line1_mess[7] <= 9'h153; // 
            line1_mess[8] <= 9'h153; // 
            line1_mess[9] <= 9'h153; // 
            line1_mess[10] <= 9'h153; // 
            line1_mess[11] <= 9'h153; // 
            line1_mess[12] <= 9'h153; // 
            line1_mess[13] <= 9'h153; // 
            line1_mess[14] <= 9'h153; // 
            line1_mess[15] <= 9'h153; // 
        end
      endcase
			// line 2 message 
			case (mess)
				0: begin
          line2_mess[0] <= 9'h153; // S
            line2_mess[1] <= 9'h148; // H
            line2_mess[2] <= 9'h14E; // N
            line2_mess[3] <= 9'h14E; // N
            line2_mess[4] <= 9'h159; // Y
            line2_mess[5] <= 9'h135; // 5
            line2_mess[6] <= 9'h135; // 
            line2_mess[7] <= 9'h135; // 
            line2_mess[8] <= 9'h135; // 
            line2_mess[9] <= 9'h135; // 
            line2_mess[10] <= 9'h135; // 
            line2_mess[11] <= 9'h135; // 
            line2_mess[12] <= 9'h135; // 
            line2_mess[13] <= 9'h135; // 
            line2_mess[14] <= 9'h135; // 
            line2_mess[15] <= 9'h135; // 

				end
				
				1: begin
           line2_mess[0] <= 9'h153; // S
            line2_mess[1] <= 9'h148; // H
            line2_mess[2] <= 9'h14E; // N
            line2_mess[3] <= 9'h14E; // N
            line2_mess[4] <= 9'h159; // Y
            line2_mess[5] <= 9'h135; // 5
            line2_mess[6] <= 9'h120; // 
            line2_mess[7] <= 9'h120; // 
            line2_mess[8] <= 9'h120; // 
            line2_mess[9] <= 9'h120; // 
            line2_mess[10] <= 9'h120; // 
            line2_mess[11] <= 9'h120; // 
            line2_mess[12] <= 9'h120; // 
            line2_mess[13] <= 9'h120; // 
            line2_mess[14] <= 9'h120; // 
            line2_mess[15] <= 9'h120; // 
				end
        
			endcase
		end
	end
end

reg [31:0] counter;
reg refresh;
always@(posedge iCLK) begin: increment_counter
	if(counter == 27'h5F5E100) begin
		refresh <= 1;
		counter <= 0;
	end else begin
		counter <= counter + 1;
		refresh <= 0;
	end
end

/** Message Arrays **/
reg [9:0] line1_mess [15:0];
reg [9:0] line2_mess [15:0];
// Page Recieved

always@(posedge iCLK)
begin

	case(LUT_INDEX)
	//	Initial
	LCD_INTIAL+0:	LUT_DATA	<=	9'h038;
	LCD_INTIAL+1:	LUT_DATA	<=	9'h00C;
	LCD_INTIAL+2:	LUT_DATA	<=	9'h001;
	LCD_INTIAL+3:	LUT_DATA	<=	9'h006;
	LCD_INTIAL+4:	LUT_DATA	<=	9'h080;
	//	Line 1
	LCD_LINE1+0:	LUT_DATA	<=	line1_mess[0];	//	WEBSERVER STATUS
	LCD_LINE1+1:	LUT_DATA	<=	line1_mess[1];
	LCD_LINE1+2:	LUT_DATA	<=	line1_mess[2];
	LCD_LINE1+3:	LUT_DATA	<=	line1_mess[3];
	LCD_LINE1+4:	LUT_DATA	<=	line1_mess[4];
	LCD_LINE1+5:	LUT_DATA	<=	line1_mess[5];
	LCD_LINE1+6:	LUT_DATA	<=	line1_mess[6];
	LCD_LINE1+7:	LUT_DATA	<=	line1_mess[7];
	LCD_LINE1+8:	LUT_DATA	<=	line1_mess[8];
	LCD_LINE1+9:	LUT_DATA	<=	line1_mess[9];
	LCD_LINE1+10:	LUT_DATA	<=	line1_mess[10];
	LCD_LINE1+11:	LUT_DATA	<=	line1_mess[11];
	LCD_LINE1+12:	LUT_DATA	<=	line1_mess[12];
	LCD_LINE1+13:	LUT_DATA	<=	line1_mess[13];
	LCD_LINE1+14:	LUT_DATA	<=	line1_mess[14];
	LCD_LINE1+15:	LUT_DATA	<=	line1_mess[15];
	//	Change Line
	LCD_CH_LINE:	LUT_DATA	<=	9'h0C0;
	//	Line 2
	LCD_LINE2+0:	LUT_DATA	<=	line2_mess[0];	//	0: Page Recieved
	LCD_LINE2+1:	LUT_DATA	<=	line2_mess[1]; // 1: Page Loaded
	LCD_LINE2+2:	LUT_DATA	<=	line2_mess[2]; // 2: Page Sent
	LCD_LINE2+3:	LUT_DATA	<=	line2_mess[3];
	LCD_LINE2+4:	LUT_DATA	<=	line2_mess[4];
	LCD_LINE2+5:	LUT_DATA	<=	line2_mess[5];
	LCD_LINE2+6:	LUT_DATA	<=	line2_mess[6];
	LCD_LINE2+7:	LUT_DATA	<=	line2_mess[7];
	LCD_LINE2+8:	LUT_DATA	<=	line2_mess[8];
	LCD_LINE2+9:	LUT_DATA	<=	line2_mess[9];
	LCD_LINE2+10:	LUT_DATA	<=	line2_mess[10];
	LCD_LINE2+11:	LUT_DATA	<=	line2_mess[11];
	LCD_LINE2+12:	LUT_DATA	<=	line2_mess[12];
	LCD_LINE2+13:	LUT_DATA	<=	line2_mess[13];
	LCD_LINE2+14:	LUT_DATA	<=	line2_mess[14];
	LCD_LINE2+15:	LUT_DATA	<=	line2_mess[15];
	default:		LUT_DATA	<=	9'dx ;
	endcase
end




lcd_controller u0(
//    Host Side
.iDATA(mLCD_DATA),
.iRS(mLCD_RS),
.iStart(mLCD_Start),
.oDone(mLCD_Done),
.iCLK(iCLK),
.iRST_N(iRST_N),
//    LCD Interface
.LCD_DATA(LCD_DATA),
.LCD_RW(LCD_RW),
.LCD_EN(LCD_EN),
.LCD_RS(LCD_RS)    );

endmodule
